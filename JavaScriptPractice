/*
Reduce Data with Javascript Array#reduce
Egghead.io course by Mykola Bilokonsky


Introducing Reduce: Reducing an Array into an Object*/

var data = [15, 3, 20];

var reducer = function(accumulator, item) {
	return accumulator + item;
};

var initialValue = 0;

var total = data.reduce(reducer, initialValue);
console.log("the sum is ", total);



/*Introducing Reduce: Reducing an Array into an Object*/
var votes = [
	"angular",
	"angular",
	"react",
	"react",
	"react",
	"angular",
	"ember",
	"react",
	"vanilla"
	];

var initialValue = {};

var reducer = function(tally, vote) {
	if (!tally[vote]) {
		tally[vote] = 1;
	} else {
		tally[vote] = tally[vote] + 1;
	}

	return tally;
};

var results = votes.reduce(reducer, initialValue);
console.log(results);


/* Introducing Reduce: Common Patterns */

var data = [1, 2, 3];
var doubled = data.reduce(function(acc, value) {
	acc.push(value * 2);

	return acc;
}, []);

console.log( doubled);



/* This is the same as using the .map method!!! */


var data = [1, 2, 3];
var doubled = data.reduce(function(acc, value) {
	acc.push(value * 2);

	return acc;
}, [] );

var doubleMapped = data.map(function(item) {
	return item * 2;
});

console.log( doubleMapped);



/* reduce is better because it is faster! Check out this interesting timing trick
use console.time and console.timeEnd */

var data = [1, 2, 3];
var doubled = data.reduce(function(acc, value) {
	acc.push(value * 2);

	return acc;
}, [] );

var doubleMapped = data.map(function(item) {
	return item * 2;
});

var data2 = [1, 2, 3, 4, 5, 6];
var evens = data2.reduce(function(acc, value) {
	if (value % 2 === 0) {
		acc.push(value);
	}

	return acc;
	}, []);

var evenFiltered = data2.filter(function(item) {
	return (item % 2 === 0 );
});

var filterMapped = data2.filter(function(value) {
	return value % 2 === 0;
}).map(function(value) {
	return value * 2;
});
var bigData = [];
for (var i = 0; i < 1000000; i++) {
	bigData[i] = i;
}
console.time('bigData');
var filterMappedBigData = bigData.filter(function(value) {
	return value % 2 === 0;
}).map(function(value) {
	return value * 2;
});

console.timeEnd('bigData');
console.time('bigDataReduce');
var reducedBigData = bigData.reduce(function(acc, value) {
	if (value % 2 === 0) {
		acc.push(value * 2);
	}
	return acc;
}, [])
console.timeEnd('bigDataReduce');
